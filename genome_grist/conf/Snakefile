# top-level targets:
# - download_reads
# - trim_reads
# - smash_reads
# - gather_genbank
# - download_matching_genomes
# - map_reads
# - summarize
# - build_consensus
# - make_sgc_conf

import glob, os, csv

SAMPLE=config['sample']
print(f'sample: {SAMPLE}')

outdir = config.get('outdir', 'outputs/')
outdir = outdir.rstrip('/')
print('outdir:', outdir)

ABUNDTRIM_MEMORY = config.get('metagenome_trim_memory', '1e9')

sourmash_db_pattern = config.get('sourmash_database_glob_pattern', 'MUST SPECIFY IN CONFIG')
SOURMASH_DB_LIST = glob.glob(sourmash_db_pattern)
SOURMASH_DB_KSIZE = config.get('sourmash_database_ksize', ['31'])

SOURMASH_COMPUTE_KSIZES = config.get('sourmash_compute_ksizes',
                                     ['21', '31',' 51'])
SOURMASH_COMPUTE_SCALED = config.get('sourmash_scaled', '1000')

GATHER_CSV = f'{outdir}/genbank/{SAMPLE}.x.genbank.gather.csv'

###

wildcard_constraints:
    size="\d+",
    sra_id='[a-zA-Z0-9._-]+'                   # should be everything but /

rule all:
    input:
        GATHER_CSV

rule download_reads:
    input:
        f"{outdir}/raw/{SAMPLE}_1.fastq.gz",
        f"{outdir}/raw/{SAMPLE}_2.fastq.gz",
        f"{outdir}/raw/{SAMPLE}.raw.sig",

rule trim_reads:
    input:
        url_file = f"{outdir}/abundtrim/{SAMPLE}.abundtrim.fq.gz"

rule smash_reads:
    input:
        url_file = f"{outdir}/sigs/{SAMPLE}.abundtrim.sig"

checkpoint gather_genbank:
    input:
        url_file = GATHER_CSV
    output:
        touch(f"{outdir}/.gather.{SAMPLE}")   # checkpoints need an output ;)

class Checkpoint_GatherResults:
    def __init__(self, pattern):
        self.pattern = pattern

    def get_genome_accs(self):
        assert os.path.exists(GATHER_CSV)

        genome_accs = []
        with open(GATHER_CSV, 'rt') as fp:
           r = csv.DictReader(fp)
           for row in r:
               acc = row['name'].split(' ')[0]
               genome_accs.append(acc)
        print(f'loaded {len(genome_accs)} accessions from gather results.')

        return genome_accs

    def __call__(self, w):
        global checkpoints

        # wait for the results of 'gather_genbank'; this will trigger
        # exception until that rule has been run.
        checkpoints.gather_genbank.get()

        # parse hitlist_genomes,
        genome_accs = self.get_genome_accs()

        p = expand(self.pattern, acc=genome_accs, **w)
        return p

rule download_matching_genomes:
    input:
        genome = Checkpoint_GatherResults("genbank_genomes/{acc}_genomic.fna.gz"),

rule map_reads:
    input:
        f"{outdir}/minimap/depth/{SAMPLE}.summary.csv",
        f"{outdir}/leftover/depth/{SAMPLE}.summary.csv"

rule build_consensus:
    input:
        Checkpoint_GatherResults(outdir + f"/minimap/{SAMPLE}.x.{{acc}}.consensus.fa.gz"),
        Checkpoint_GatherResults(outdir + f"/leftover/{SAMPLE}.x.{{acc}}.consensus.fa.gz"),

rule summarize:
    input:
        outdir + f'/reports/report-{SAMPLE}.html'

rule make_sgc_conf:
    input:
        outdir + f"/sgc/{SAMPLE}.conf"

# print out the configuration
rule showconf:
    run:
        import yaml
        print('# full aggregated configuration:')
        print(yaml.dump(config).strip())
        print('# END')

# check config files only
rule check:
    run:
        pass

rule zip:
    shell: """
        zip -r transfer.zip {outdir}/leftover/depth/*.summary.csv \
                {outdir}/minimap/depth/*.summary.csv \
                {outdir}/*.gather.csv
    """


# download SRA IDs.
rule wc_download_sra:
    output:
        r1 = protected(outdir + "/raw/{sra_id}_1.fastq.gz"),
        r2 = protected(outdir + "/raw/{sra_id}_2.fastq.gz"),
    conda: "env/sra.yml"
    shell: '''
        fastq-dump --skip-technical  \
               --readids \
               --read-filter pass \
               --dumpbase \
               --split-spot \
               --clip \
               -Z \
               {wildcards.sra_id} | \
               perl -ne 's/\.([12]) /\/$1 /; print $_' | \
               split-paired-reads.py --gzip -1 {output.r1} -2 {output.r2}
        '''

# compute sourmash signature from raw reads
rule sourmash_reads_raw:
    input:
        r1 = outdir + "/raw/{sra_id}_1.fastq.gz",
        r2 = outdir + "/raw/{sra_id}_2.fastq.gz",
    output:
        sig = outdir + "/raw/{sra_id}.raw.sig"
    conda: "env/sourmash.yml"
    params:
        ksizes = ",".join([str(i) for i in SOURMASH_COMPUTE_KSIZES]),
        scaled = SOURMASH_COMPUTE_SCALED,
    shell: """
        sourmash compute -k {params.ksizes} --scaled={params.scaled} \
           {input.r1} {input.r2} -o {output} \
           --name 'rawreads:{wildcards.sra_id}' --track-abundance
    """

# adapter trimming
rule adapter_trim:
    input:
        r1 = ancient(outdir + "/raw/{sample}_1.fastq.gz"),
        r2 = ancient(outdir + "/raw/{sample}_2.fastq.gz"),
        adapters = "inputs/adapters.fa"
    output:
        r1 = protected(outdir + '/trim/{sample}_R1.trim.fq.gz'),
        r2 = protected(outdir + '/trim/{sample}_R2.trim.fq.gz'),
        o1 = protected(outdir + '/trim/{sample}_o1.trim.fq.gz'),
        o2 = protected(outdir + '/trim/{sample}_o2.trim.fq.gz'),
    conda: 'env/trim.yml'
    shell: """
        trimmomatic PE {input.r1} {input.r2} \
             {output.r1} {output.o1} {output.r2} {output.o2} \
             ILLUMINACLIP:{input.adapters}:2:0:15 MINLEN:25  \
             LEADING:2 TRAILING:2 SLIDINGWINDOW:4:2
    """

# k-mer abundance trimming
rule kmer_trim_reads:
    input: 
        r1 = ancient(outdir + "/trim/{sample}_R1.trim.fq.gz"), 
        r2 = ancient(outdir + "/trim/{sample}_R2.trim.fq.gz"),
    output:
        protected(outdir + "/abundtrim/{sample}.abundtrim.fq.gz")
    conda: 'env/trim.yml'
    params:
        mem = ABUNDTRIM_MEMORY,
    shell: """
        interleave-reads.py {input.r1} {input.r2} | 
            trim-low-abund.py -C 3 -Z 18 -M {params.mem} -V - \
               -o {output} --gzip
    """

# map abundtrim reads and producing a bam
rule minimap:
    input:
        query = ancient("genbank_genomes/{acc}_genomic.fna.gz"),
        metagenome = outdir + "/abundtrim/{sra_id}.abundtrim.fq.gz",
    output:
        bam = outdir + "/minimap/{sra_id}.x.{acc}.bam",
    conda: "env/minimap2.yml"
    threads: 4
    shell: """
        minimap2 -ax sr -t {threads} {input.query} {input.metagenome} | \
            samtools view -b -F 4 - | samtools sort - > {output.bam}
    """

# extract FASTQ from BAM
rule samtools_fastq:
    input:
        bam = outdir + "/minimap/{bam}.bam",
    output:
        mapped = outdir + "/minimap/{bam}.mapped.fq.gz",
    conda: "env/minimap2.yml"
    threads: 4
    shell: """
        samtools bam2fq {input.bam} | gzip > {output.mapped}
    """

# get per-base depth information from BAM
rule samtools_depth:
    input:
        bam = outdir + "/{dir}/{bam}.bam",
    output:
        depth = outdir + "/{dir}/depth/{bam}.txt",
    conda: "env/minimap2.yml"
    shell: """
        samtools depth -aa {input.bam} > {output.depth}
    """

# wild card rule for getting _covered_ regions from BAM
rule covered_regions:
    input:
        bam = outdir + "/{dir}/{bam}.bam",
    output:
        regions = outdir + "/{dir}/depth/{bam}.regions.bed",
    conda: "env/covtobed.yml"
    shell: """
        covtobed {input.bam} -l 100 -m 1 | \
            bedtools merge -d 5 -c 4 -o mean > {output.regions}
    """

# calculating SNPs/etc.
rule mpileup:
    input:
        query = ancient("genbank_genomes/{acc}_genomic.fna.gz"),
        bam = outdir + "/{dir}/{sra_id}.x.{acc}.bam",
    output:
        bcf = outdir + "/{dir}/{sra_id}.x.{acc}.bcf",
        vcf = outdir + "/{dir}/{sra_id}.x.{acc}.vcf.gz",
        vcfi = outdir + "/{dir}/{sra_id}.x.{acc}.vcf.gz.csi",
    conda: "env/bcftools.yml"
    shell: """
        genomefile=$(mktemp -t grist.genome.XXXXXXX)
        gunzip -c {input.query} > $genomefile
        bcftools mpileup -Ou -f $genomefile {input.bam} | bcftools call -mv -Ob -o {output.bcf}
        rm $genomefile
        bcftools view {output.bcf} | bgzip > {output.vcf}
        bcftools index {output.vcf}
    """

# build new consensus
rule new_consensus:
    input:
        vcf = outdir + "/{dir}/{sra_id}.x.{acc}.vcf.gz",
        query = ancient("genbank_genomes/{acc}_genomic.fna.gz"),
        regions = outdir + "/{dir}/depth/{sra_id}.x.{acc}.regions.bed",
    output:
        mask = outdir + "/{dir}/{sra_id}.x.{acc}.mask.bed",
        genomefile = outdir + "/{dir}/{sra_id}.x.{acc}.fna.gz.sizes",
        consensus = outdir + "/{dir}/{sra_id}.x.{acc}.consensus.fa.gz",
    conda: "env/bcftools.yml"
    shell: """
        genomefile=$(mktemp -t grist.genome.XXXXXXX)
        gunzip -c {input.query} > $genomefile
        samtools faidx $genomefile
        cut -f1,2 ${{genomefile}}.fai > {output.genomefile}
        bedtools complement -i {input.regions} -g {output.genomefile} > {output.mask}
        bcftools consensus -f $genomefile {input.vcf} -m {output.mask} | \
            gzip > {output.consensus}
        rm $genomefile
    """

# summarize depth into a CSV
rule summarize_samtools_depth:
    input:
        Checkpoint_GatherResults(outdir + f"/{{dir}}/depth/{SAMPLE}.x.{{acc}}.txt")
    output:
        f"{outdir}/{{dir}}/depth/{SAMPLE}.summary.csv"
    run:
        import pandas as pd

        runs = {}
        for n, sra_stat in enumerate(input):
            print(f'reading from {sra_stat} - {n+1}/{len(input)}...')
            data = pd.read_table(sra_stat, names=["contig", "pos", "coverage"])
            sra_id = sra_stat.split("/")[-1].split(".")[0]
            genome_id = sra_stat.split("/")[-1].split(".")[2]

            d = {}
            value_counts = data['coverage'].value_counts()
            d['genome bp'] = int(len(data))
            d['missed'] = int(value_counts.get(0, 0))
            d['percent missed'] = 100 * d['missed'] / d['genome bp']
            d['coverage'] = data['coverage'].sum() / len(data)
            if d['missed'] != 0:
                uniq_cov = d['coverage'] / (1 - d['missed'] / d['genome bp'])
                d['unique_mapped_coverage'] = uniq_cov
            else:
                d['unique_mapped_coverage'] = d['coverage']
            d['covered_bp'] = (1 - d['percent missed']/100.0) * d['genome bp']
            d['genome_id'] = genome_id
            d['sample_id'] = sra_id
            runs[genome_id] = d

        pd.DataFrame(runs).T.to_csv(output[0])

# compute sourmash signature from abundtrim reads
rule sourmash_reads_abundtrim:
    input:
        metagenome = ancient(outdir + "/abundtrim/{sra_id}.abundtrim.fq.gz"),
    output:
        sig = outdir + "/sigs/{sra_id}.abundtrim.sig"
    conda: "env/sourmash.yml"
    params:
        ksizes = ",".join([str(i) for i in SOURMASH_COMPUTE_KSIZES]),
        scaled = SOURMASH_COMPUTE_SCALED,
    shell: """
        sourmash compute -k {params.ksizes} --scaled={params.scaled} \
           {input} -o {output} \
           --name {wildcards.sra_id} --track-abundance
    """

# configure ipython kernel for papermill
rule set_kernel:
    output:
        touch(f"{outdir}/.kernel.set")
    conda: 'env/papermill.yml'
    shell: """
        python -m ipykernel install --user --name genome_grist
        python -m pip install matplotlib numpy pandas
    """


# papermill -> reporting notebook + html
rule make_notebook:
    input:
        nb = 'genome_grist/notebooks/report-sample.ipynb',
        all_csv = f"{outdir}/minimap/depth/{SAMPLE}.summary.csv",
        depth_csv = f"{outdir}/leftover/depth/{SAMPLE}.summary.csv",
        gather_csv = GATHER_CSV,
        genomes_info_csv = f"{outdir}/genbank/{SAMPLE}.genomes.info.csv",
        kernel_set = rules.set_kernel.output,
    output:
        nb = outdir + f'/reports/report-{SAMPLE}.ipynb',
        html = outdir + f'/reports/report-{SAMPLE}.html',
    params:
        cwd = outdir + '/reports/',
        outdir = outdir,
    conda: 'env/papermill.yml'
    shell: """
        papermill {input.nb} - -k genome_grist \
              -p sample_id {SAMPLE:q} -p render '' -p outdir {outdir:q}\
              --cwd {params.cwd} \
              > {output.nb}
        python -m nbconvert {output.nb} --to html --stdout --no-input \
             --ExecutePreprocessor.kernel_name=genome_grist > {output.html}
    """

# convert mapped reads to leftover reads
# @CTB update subtract-gather to take sample ID as param
# @CTB update for intersected/overlapping reads too
rule extract_leftover_reads:
    input:
        csv = GATHER_CSV,
        mapped = Checkpoint_GatherResults(f"{outdir}/minimap/{SAMPLE}.x.{{acc}}.mapped.fq.gz"),
    output:
        touch(f"{outdir}/.leftover-reads.{SAMPLE}")
    conda: "env/sourmash.yml"
    params:
        outdir = outdir,
    shell: """
        python -m genome_grist.subtract_gather {input.csv} \
            --outdir={params.outdir:q}
    """

# rule for mapping leftover reads to genomes -> BAM
rule map_leftover_reads:
    input:
        all_csv = f"{outdir}/minimap/depth/{{sra_id}}.summary.csv",
        query = ancient(f"genbank_genomes/{{acc}}_genomic.fna.gz"),
        leftover_reads_flag = f"{outdir}/.leftover-reads.{SAMPLE}",
    output:
        bam=outdir + "/leftover/{sra_id}.x.{acc}.bam",
    conda: "env/minimap2.yml"
    threads: 4
    shell: """
        minimap2 -ax sr -t {threads} {input.query} \
     {outdir}/minimap/{wildcards.sra_id}.x.{wildcards.acc}.leftover.fq.gz | \
            samtools view -b -F 4 - | samtools sort - > {output.bam}
    """

# run sourmash gather x genbank
rule prefetch_sourmash_gather_reads_genbank:
    input:
        sig = outdir + "/sigs/{sra_id}.abundtrim.sig",
        db = SOURMASH_DB_LIST,
    output:
        matches = outdir + "/genbank/{sra_id}.x.genbank.prefetch.sig",
    conda: "env/sourmash.yml"
    params:
        ksize = SOURMASH_DB_KSIZE,
    shell: """
        python -m genome_grist.prefetch_gather --query {input.sig} \
          --db {input.db} --save-matches {output.matches} -k {params.ksize}
    """

# run sourmash gather on abundtrim read signature
rule sourmash_gather_reads:
    input:
        sig = outdir + "/sigs/{sra_id}.abundtrim.sig",
        db = outdir + "/genbank/{sra_id}.x.genbank.prefetch.sig",
    output:
        csv = outdir + "/genbank/{sra_id}.x.genbank.gather.csv",
        matches = outdir + "/genbank/{sra_id}.x.genbank.matches.sig",
        out = outdir + "/genbank/{sra_id}.x.genbank.gather.out",
    conda: "env/sourmash.yml"
    shell: """
        sourmash gather {input.sig} {input.db} -o {output.csv} \
          --save-matches {output.matches} > {output.out}
    """

# download genbank genome details; make an info.csv file for entry.
rule make_genbank_info_csv:
    output:
        csvfile = 'genbank_genomes/{acc}.info.csv'
    conda: 'env/genbank.yml'
    shell: """
        python -m genome_grist.genbank_genomes {wildcards.acc} \
            --output {output.csvfile}
    """

# combined info.csv
rule make_combined_info_csv:
    input:
        Checkpoint_GatherResults('genbank_genomes/{acc}.info.csv')
    output:
        genomes_info_csv = f"{outdir}/genbank/{SAMPLE}.genomes.info.csv",
    shell: """
        python -m genome_grist.combine_csvs {input} > {output}
    """

# download actual genomes!
rule download_matching_genomes_one_by_one:
     input:
         csvfile = ancient('genbank_genomes/{acc}.info.csv')
     output:
         genome = "genbank_genomes/{acc}_genomic.fna.gz"
     run:
         with open(input.csvfile, 'rt') as infp:
             r = csv.DictReader(infp)
             rows = list(r)
             assert len(rows) == 1
             row = rows[0]
             acc = row['acc']
             assert wildcards.acc.startswith(acc)
             url = row['genome_url']
             name = row['ncbi_tax_name']

             print(f"downloading genome for acc {acc}/{name} from NCBI...")
             with open(output.genome, 'wb') as outfp:
                 with urllib.request.urlopen(url) as response:
                     content = response.read()
                     outfp.write(content)
                     print(f"...wrote {len(content)} bytes to {output.genome}")

# create a spacegraphcats config file
rule create_sgc_conf_generic:
    input:
        csv = outdir + "/genbank/{sra_id}.x.genbank.gather.csv",
        queries = Checkpoint_GatherResults("genbank_genomes/{acc}_genomic.fna.gz"),
    output:
        conf = outdir + "/sgc/{sra_id}.conf"
    run:
        query_list = "\n- ".join(input.queries)
        with open(output.conf, 'wt') as fp:
           print(f"""\
catlas_base: {wildcards.sra_id}
input_sequences:
- {outdir}/abundtrim/{wildcards.sra_id}.abundtrim.fq.gz
ksize: 31
radius: 1
search:
- {query_list}
""", file=fp)
